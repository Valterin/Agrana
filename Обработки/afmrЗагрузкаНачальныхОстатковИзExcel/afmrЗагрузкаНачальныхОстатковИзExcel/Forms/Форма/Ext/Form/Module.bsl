
&НаКлиенте
Процедура РежимОбработкиПриИзменении(Элемент)
	УстановитьВидимостьЭлементовРежима(Элементы, РежимОбработки); 
	ТЧДляЗагрузкиАвансов.Очистить();
	ТЧДляЗагрузкиЗадолженности.Очистить();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовРежима(Элементы, РежимОбработки)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧДляЗагрузкиАвансов", "Видимость", РежимОбработки = "ЗагрузкаАвансовПоставщикам" ИЛИ РежимОбработки = "ЗагрузкаАвансовКлиентов");	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧДляЗагрузкиЗадолженности", "Видимость", РежимОбработки = "ЗагрузкаЗадолженностиПоставщикам" ИЛИ РежимОбработки = "ЗагрузкаЗадолженностиКлиентов");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	РежимОбработки = "ЗагрузкаЗадолженностиПоставщикам";  
	УстановитьВидимостьЭлементовРежима(Элементы, РежимОбработки);
	СтруктураНаименованийЛистов = Новый Структура; 
	СтруктураНаименованийЛистов.Вставить("ЗагрузкаЗадолженностиПоставщикам", "Задолженность поставщику");  
	СтруктураНаименованийЛистов.Вставить("ЗагрузкаЗадолженностиКлиентов ", "Задолженность клиентов");
	СтруктураНаименованийЛистов.Вставить("ЗагрузкаАвансовПоставщикам ", "Авансы поставщику");
	СтруктураНаименованийЛистов.Вставить("ЗагрузкаАвансовКлиентов ", "Авансы клиентов");
	СтруктураЛистовРежимов = СтруктураНаименованийЛистов;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФайл(Команда)  
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выбор файла";
	Диалог.Фильтр = "Excel файлы(*.xls;*.xlsx)|*.xls;*.xlsx";
	Диалог.ИндексФильтра = 0;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = Ложь; 
	Если Диалог.Выбрать() Тогда
		ПутьКФайлу = Диалог.ПолноеИмяФайла; 
	Иначе
		Возврат;
	КонецЕсли;
	
	//ДвоичДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	//Адрес = ПоместитьВоВременноеХранилище(ДвоичДанные, УникальныйИдентификатор);
	
	Попытка
		Эксель = Новый COMОбъект("Excel.Application");
		Эксель.DisplayAlerts = 0;
		Эксель.Visible = 0;
	Исключение
		Сообщить(ОписаниеОшибки()); 
		Возврат;
	КонецПопытки;
	
	ЭксельКнига = Эксель.Workbooks.Open(ПутьКФайлу);	
	КоличествоСтраниц = ЭксельКнига.Sheets.Count;
	
	ИмяЧитаемогоЛиста = СтруктураЛистовРежимов[РежимОбработки];
	
	// определеяем состав читаемых колонок 
	Если РежимОбработки = "ЗагрузкаЗадолженностиПоставщикам" ИЛИ РежимОбработки = "ЗагрузкаЗадолженностиКлиентов" Тогда 
		РабочаяТаблица = ТЧДляЗагрузкиЗадолженности;
		ИмяРабочейТаблицы = "ТЧДляЗагрузкиЗадолженности";
	ИначеЕсли РежимОбработки = "ЗагрузкаАвансовПоставщикам" ИЛИ РежимОбработки = "ЗагрузкаАвансовКлиентов" Тогда
		РабочаяТаблица = ТЧДляЗагрузкиАвансов;
		ИмяРабочейТаблицы = "ТЧДляЗагрузкиАвансов";
	КонецЕсли;
	
	СоответствиеКолонок = ПолучитьСоставКолонок(ИмяРабочейТаблицы);
	
	// Перебираем все листы
	Для НомерЛиста = 1 По КоличествоСтраниц Цикл 
		Лист = ЭксельКнига.Sheets(НомерЛиста);  
		Если НЕ Лист.Name = ИмяЧитаемогоЛиста Тогда 
			Продолжить;
		КонецЕсли;
		
		КоличествоСтрок = Лист.Cells(1, 1).SpecialCells(11).Row;
		КоличествоКолонок = Лист.Cells(1, 1).SpecialCells(11).Column;
		
		// Перебираем строки
		Для НомерСтроки = 4 По КоличествоСтрок Цикл 
			НоваяСтрока = РабочаяТаблица.Добавить();
			
			// Перебираем колонки
			Для НомерКолонки = 1 По КоличествоКолонок Цикл  
				
				ЗначениеВЯчейке = Лист.Cells(НомерСтроки, НомерКолонки).Value;
				ИмяКолонки = СоответствиеКолонок.Получить(НомерКолонки); 
				
				НоваяСтрока[ИмяКолонки] = ЗначениеВЯчейке;
				
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;
	
	Эксель.Workbooks.Close();
	Эксель.Application.Quit();
	
	ОбработатьТаблицуНаСервере(ИмяРабочейТаблицы);
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСоставКолонок(ИмяРабочейТаблицы)
	
	СоответствиеКолонок = Новый Соответствие; 
	РабочаяТаблица = ЭтотОбъект[ИмяРабочейТаблицы].Выгрузить(); 
	Счетчик = 2; 
	СоответствиеКолонок.Вставить(1, РабочаяТаблица.Колонки.НомерСтроки.Имя);
	
	Для Каждого Колонка Из РабочаяТаблица.Колонки Цикл 
		Если НЕ Колонка.Имя = "ДатаДокумента" ИЛИ НЕ Колонка.Имя = "НомерСтроки"   Тогда
			Если ИмяРабочейТаблицы  = "ТЧДляЗагрузкиАвансов" Тогда
				Если Счетчик = 12 Тогда
					СоответствиеКолонок.Вставить(Счетчик, РабочаяТаблица.Колонки.НомерДокумента.Имя);	
					Счетчик = Счетчик + 1;
					СоответствиеКолонок.Вставить(Счетчик, РабочаяТаблица.Колонки.ДатаДокумента.Имя); 
					Счетчик = Счетчик + 1;
					СоответствиеКолонок.Вставить(Счетчик, РабочаяТаблица.Колонки.НомерВходящегоДокумента.Имя);
					Счетчик = Счетчик + 1;
					СоответствиеКолонок.Вставить(Счетчик, РабочаяТаблица.Колонки.ДатаВходящегоДокумента.Имя);
					Счетчик = Счетчик + 1;
				КонецЕсли;
			Иначе
				Если Счетчик = 14 Тогда
					СоответствиеКолонок.Вставить(Счетчик, РабочаяТаблица.Колонки.НомерДокумента.Имя);
					Счетчик = Счетчик + 1;
					СоответствиеКолонок.Вставить(Счетчик, РабочаяТаблица.Колонки.ДатаДокумента.Имя);
					Счетчик = Счетчик + 1;
					СоответствиеКолонок.Вставить(Счетчик, РабочаяТаблица.Колонки.НомерВходящегоДокумента.Имя); 
					Счетчик = Счетчик + 1;
					СоответствиеКолонок.Вставить(Счетчик, РабочаяТаблица.Колонки.ДатаВходящегоДокумента.Имя);
					Счетчик = Счетчик + 1;
				КонецЕсли;
			КонецЕсли;
			
			СоответствиеКолонок.Вставить(Счетчик, Колонка.Имя); 
			Счетчик = Счетчик + 1; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоответствиеКолонок;
	
КонецФункции

&НаСервере
Процедура ОбработатьТаблицуНаСервере(ИмяРабочейТаблицы)
	
	ТЗДляОбработки = ЭтотОбъект[ИмяРабочейТаблицы].Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗ", ТЗДляОбработки);
	
	Если РежимОбработки = "ЗагрузкаЗадолженностиПоставщикам" ИЛИ РежимОбработки = "ЗагрузкаЗадолженностиКлиентов" Тогда 
		Запрос.Текст =  
		"ВЫБРАТЬ
		|	ТЗ.SAPКонтрагентСтрока КАК SAPКонтрагентСтрока,
		|	ТЗ.ДоговорСтрока КАК ДоговорСтрока,
		|	ТЗ.ДатаДоговораСтрока КАК ДатаДоговораСтрока,
		|	ТЗ.СоглашениеСтрока КАК СоглашениеСтрока,
		|	ТЗ.ТипОбъектаРасчетовСтрока КАК ТипОбъектаРасчетовСтрока,
		|	ТЗ.ВалютаВзаиморасчетовСтрока КАК ВалютаВзаиморасчетовСтрока,
		|	ТЗ.СуммаСтрока КАК СуммаСтрока,
		|	ТЗ.СуммаУпрСтрока КАК СуммаУпрСтрока,
		|	ТЗ.СуммаРеглСтрока КАК СуммаРеглСтрока,
		|	ТЗ.ДатаПлатежаСтрока КАК ДатаПлатежаСтрока,
		|	ТЗ.ОтложенныйДоходНУСтрока КАК ОтложенныйДоходНУСтрока,
		|	ТЗ.ОтложенныйРасходНУСтрока КАК ОтложенныйРасходНУСтрока,
		|   ТЗ.ДатаДокумента КАК ДатаДокумента,
		|   ТЗ.НомерСтроки КАК НомерСтроки,
		|   ТЗ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|   ТЗ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|   ТЗ.НомерДокумента КАК НомерДокумента
		|ПОМЕСТИТЬ ИсходныеДанные
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартнерыДополнительныеРеквизиты.Ссылка КАК Ссылка,
		|	ПартнерыДополнительныеРеквизиты.Значение КАК Значение
		|ПОМЕСТИТЬ ВТ_Партнеры
		|ИЗ
		|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|ГДЕ
		|	ПартнерыДополнительныеРеквизиты.Свойство.Имя = ""SAPномерКонтрагента_c9f329ce230c472f9304a51307b36e72""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.SAPКонтрагентСтрока КАК SAPКонтрагентСтрока,
		|	ИсходныеДанные.ДоговорСтрока КАК ДоговорСтрока,
		|	ИсходныеДанные.ДатаДоговораСтрока КАК ДатаДоговораСтрока,
		|	ИсходныеДанные.СоглашениеСтрока КАК СоглашениеСтрока,
		|	ИсходныеДанные.ТипОбъектаРасчетовСтрока КАК ТипОбъектаРасчетовСтрока,
		|	ИсходныеДанные.ВалютаВзаиморасчетовСтрока КАК ВалютаВзаиморасчетовСтрока,
		|	ИсходныеДанные.СуммаСтрока КАК СуммаСтрока,
		|	ИсходныеДанные.СуммаУпрСтрока КАК СуммаУпрСтрока,
		|	ИсходныеДанные.СуммаРеглСтрока КАК СуммаРеглСтрока, 
		|	ИсходныеДанные.ДатаПлатежаСтрока КАК ДатаПлатежаСтрока,
		|	ИсходныеДанные.ОтложенныйДоходНУСтрока КАК ОтложенныйДоходНУСтрока,
		|	ИсходныеДанные.ОтложенныйРасходНУСтрока КАК ОтложенныйРасходНУСтрока,
		|   ИсходныеДанные.ДатаДокумента КАК ДатаДокумента,
		|   ИсходныеДанные.НомерСтроки КАК НомерСтроки,
		|   ИсходныеДанные.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|   ИсходныеДанные.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|   ИсходныеДанные.НомерДокумента КАК НомерДокумента,
		|	ВТ_Партнеры.Ссылка КАК Партнер,
		|	Контрагенты.Ссылка КАК Контрагент
		//	|	Валюты.Ссылка КАК Валюта
		|ПОМЕСТИТЬ ВТ_ТаблицаПредобработка
		|ИЗ
		|	ИсходныеДанные КАК ИсходныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ПО ВТ_Партнеры.Ссылка = Контрагенты.Партнер
		|		ПО ((ВЫРАЗИТЬ(ИсходныеДанные.SAPКонтрагентСтрока КАК СТРОКА(150))) = (ВЫРАЗИТЬ(ВТ_Партнеры.Значение КАК СТРОКА(150))))
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
		//|		ПО ((ВЫРАЗИТЬ(ИсходныеДанные.ВалютаВзаиморасчетовСтрока КАК СТРОКА(3))) = Валюты.Код)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаПредобработка.SAPКонтрагентСтрока КАК SAPКонтрагентСтрока,
		|	ВТ_ТаблицаПредобработка.ДоговорСтрока КАК ДоговорСтрока,
		|	ВТ_ТаблицаПредобработка.ДатаДоговораСтрока КАК ДатаДоговораСтрока,
		|	ВТ_ТаблицаПредобработка.СоглашениеСтрока КАК СоглашениеСтрока,
		|	ВТ_ТаблицаПредобработка.ТипОбъектаРасчетовСтрока КАК ТипОбъектаРасчетовСтрока,
		|	ВТ_ТаблицаПредобработка.ВалютаВзаиморасчетовСтрока КАК ВалютаВзаиморасчетовСтрока,
		|	ВТ_ТаблицаПредобработка.СуммаСтрока КАК СуммаСтрока,
		|	ВТ_ТаблицаПредобработка.СуммаУпрСтрока КАК СуммаУпрСтрока,
		|	ВТ_ТаблицаПредобработка.СуммаРеглСтрока КАК СуммаРеглСтрока, 
		|	ВТ_ТаблицаПредобработка.ДатаПлатежаСтрока КАК ДатаПлатежаСтрока,
		|	ВТ_ТаблицаПредобработка.ОтложенныйДоходНУСтрока КАК ОтложенныйДоходНУСтрока,
		|	ВТ_ТаблицаПредобработка.ОтложенныйРасходНУСтрока КАК ОтложенныйРасходНУСтрока,
		|	ВТ_ТаблицаПредобработка.Партнер КАК Партнер,
		|	ВТ_ТаблицаПредобработка.Контрагент КАК Контрагент,
		|   ВТ_ТаблицаПредобработка.ДатаДокумента КАК ДатаДокумента,
		|   ВТ_ТаблицаПредобработка.НомерСтроки КАК НомерСтроки,
		|   ВТ_ТаблицаПредобработка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|   ВТ_ТаблицаПредобработка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|   ВТ_ТаблицаПредобработка.НомерДокумента КАК НомерДокумента,
		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.Подразделение КАК Подразделение,
		|	ДоговорыКонтрагентов.ГруппаФинансовогоУчета КАК ГФУ, 
		|	ДоговорыКонтрагентов.ПорядокРасчетов КАК ТипОбъектовРасчетов,
		|	СправочникСоглашения.Ссылка КАК Соглашение,
		|	ДоговорыКонтрагентов.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	ВТ_ТаблицаПредобработка КАК ВТ_ТаблицаПредобработка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ((ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.ДоговорСтрока КАК СТРОКА(128))) = ДоговорыКонтрагентов.Номер
		|			И ВТ_ТаблицаПредобработка.ДатаДоговораСтрока = ДоговорыКонтрагентов.Дата
		|			И ВТ_ТаблицаПредобработка.Партнер = ДоговорыКонтрагентов.Партнер
		|           И  ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
		|			И (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.ВалютаВзаиморасчетовСтрока КАК СТРОКА(100))) = ДоговорыКонтрагентов.ВалютаВзаиморасчетов.Наименование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ &СправочникСоглашений КАК СправочникСоглашения
		|		ПО ((ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.СоглашениеСтрока КАК Строка(100))) = СправочникСоглашения.Наименование
		|				И СправочникСоглашения.Партнер = ВТ_ТаблицаПредобработка.Партнер
		|               И СправочникСоглашения.ПометкаУдаления = ЛОЖЬ
		|				И (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.ВалютаВзаиморасчетовСтрока КАК СТРОКА(100))) = СправочникСоглашения.Валюта.Наименование)";
		
		
		
		
		Если РежимОбработки = "ЗагрузкаЗадолженностиПоставщикам" Тогда
			СправочникСоглашений = "Справочник.СоглашенияСПоставщиками";
		Иначе
			СправочникСоглашений = "Справочник.СоглашенияСКлиентами";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СправочникСоглашений", СправочникСоглашений);
		
		Результат = Запрос.Выполнить().Выгрузить(); 
		
		Массив = Результат.ВыгрузитьКолонку("НомерСтроки");
		МассивБезДублей =  ОбщегоНазначенияКлиентСервер.СвернутьМассив(Массив);
		
		Для Каждого СтрокаМассива  Из МассивБезДублей Цикл
			Отбор = Новый Структура();
			Отбор.Вставить("НомерСтроки",СтрокаМассива);
			НайденныеСтроки  = Результат.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество()>1  Тогда 
				
				Для Счетчик = 1   ПО НайденныеСтроки.Количество()-1  Цикл
					НайденнаяСтрока =  Результат.Найти(СтрокаМассива,"НомерСтроки");
					Результат.Удалить(НайденнаяСтрока);
				КонецЦикла;	
				СтрокаДляРедактирования =  Результат.Найти(СтрокаМассива,"НомерСтроки");
				СтрокаДляРедактирования.Соглашение = Неопределено;		
				СтрокаДляРедактирования.Договор = Неопределено;
				СтрокаДляРедактирования.Подразделение = Неопределено;
				СтрокаДляРедактирования.ГФУ = Неопределено;
				СтрокаДляРедактирования.ТипОбъектовРасчетов = Неопределено;
				СтрокаДляРедактирования.НалогообложениеНДС = Неопределено;
				СтрокаДляРедактирования.ВалютаВзаиморасчетов = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		
	ИначеЕсли РежимОбработки = "ЗагрузкаАвансовПоставщикам" ИЛИ РежимОбработки = "ЗагрузкаАвансовКлиентов" Тогда
		
		
		Запрос.Текст =  
		"ВЫБРАТЬ 
		|	ТЗ.НомерКонтрагентаSAPСтрока КАК НомерКонтрагентаSAPСтрока,
		|	ТЗ.ТипОбъектаРасчетовСтрока КАК ТипОбъектаРасчетовСтрока,
		|	ТЗ.НомерЗаказаСтрока КАК НомерЗаказаСтрока,
		|	ТЗ.ДатаЗаказаСтрока КАК ДатаЗаказаСтрока,
		|	ТЗ.НомерДоговораСтрока КАК НомерДоговораСтрока,
		|	ТЗ.ДатаДоговораСтрока КАК ДатаДоговораСтрока,
		|	ТЗ.АвансСтрока КАК АвансСтрока,
		|	ТЗ.ВалютаСтрока КАК ВалютаСтрока,
		|	ТЗ.АвансРеглСтрока КАК АвансРеглСтрока, 
		|	ТЗ.АвансУпрСтрока КАК АвансУпрСтрока,
		|   ТЗ.ДатаДокумента КАК ДатаДокумента,
		|   ТЗ.НомерСтроки КАК НомерСтроки,
		|   ТЗ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|   ТЗ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|   ТЗ.НомерДокумента КАК НомерДокумента
		|ПОМЕСТИТЬ ИсходныеДанные
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартнерыДополнительныеРеквизиты.Ссылка КАК Ссылка,
		|	ПартнерыДополнительныеРеквизиты.Значение КАК Значение
		|ПОМЕСТИТЬ ВТ_Партнеры
		|ИЗ
		|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|ГДЕ
		|	ПартнерыДополнительныеРеквизиты.Свойство.Имя = ""SAPномерКонтрагента_c9f329ce230c472f9304a51307b36e72""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.НомерКонтрагентаSAPСтрока КАК НомерКонтрагентаSAPСтрока,
		|	ИсходныеДанные.ТипОбъектаРасчетовСтрока КАК ТипОбъектаРасчетовСтрока,
		|	ИсходныеДанные.НомерЗаказаСтрока КАК НомерЗаказаСтрока,
		|	ИсходныеДанные.ДатаЗаказаСтрока КАК ДатаЗаказаСтрока,
		|	ИсходныеДанные.НомерДоговораСтрока КАК НомерДоговораСтрока,
		|	ИсходныеДанные.ДатаДоговораСтрока КАК ДатаДоговораСтрока,
		|	ИсходныеДанные.АвансСтрока КАК АвансСтрока,
		|	ИсходныеДанные.ВалютаСтрока КАК ВалютаСтрока,
		|	ИсходныеДанные.АвансРеглСтрока КАК АвансРеглСтрока, 
		|	ИсходныеДанные.АвансУпрСтрока КАК АвансУпрСтрока,
		|   ИсходныеДанные.ДатаДокумента КАК ДатаДокумента,
		|   ИсходныеДанные.НомерСтроки КАК НомерСтроки,
		|   ИсходныеДанные.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|   ИсходныеДанные.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|   ИсходныеДанные.НомерДокумента КАК НомерДокумента,
		|	ВТ_Партнеры.Ссылка КАК Партнер,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорПоНомеруДате	
		|ПОМЕСТИТЬ ВТ_ТаблицаПредобработка
		|ИЗ
		|	ИсходныеДанные КАК ИсходныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ПО ВТ_Партнеры.Ссылка = Контрагенты.Партнер
		|		ПО ((ВЫРАЗИТЬ(ИсходныеДанные.НомерКонтрагентаSAPСтрока КАК СТРОКА(150))) = (ВЫРАЗИТЬ(ВТ_Партнеры.Значение КАК СТРОКА(150)))
		|			И ВТ_Партнеры.Ссылка.#ПризнакОтношений# = ИСТИНА) 
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ИсходныеДанные.ДатаДоговораСтрока = ДоговорыКонтрагентов.Дата
		|			И ВЫРАЗИТЬ(ИсходныеДанные.НомерДоговораСтрока КАК Строка(128)) = ДоговорыКонтрагентов.Номер 
		|           И Контрагенты.Ссылка = ДоговорыКонтрагентов.Контрагент
		|           И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
		|           И ВЫРАЗИТЬ(ИсходныеДанные.ВалютаСтрока КАК СТРОКА(128)) = ДоговорыКонтрагентов.ВалютаВзаиморасчетов.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.НомерКонтрагентаSAPСтрока КАК СТРОКА(150)) КАК НомерКонтрагентаSAPСтрока,
		|	ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.ТипОбъектаРасчетовСтрока КАК СТРОКА(150)) КАК ТипОбъектаРасчетовСтрока,
		|	ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.НомерЗаказаСтрока КАК СТРОКА(150)) КАК НомерЗаказаСтрока,
		|	ВТ_ТаблицаПредобработка.ДатаЗаказаСтрока КАК ДатаЗаказаСтрока,
		|	ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.НомерДоговораСтрока КАК СТРОКА(150)) КАК НомерДоговораСтрока,
		|	ВТ_ТаблицаПредобработка.ДатаДоговораСтрока КАК ДатаДоговораСтрока,
		|	ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.АвансСтрока КАК СТРОКА(150)) КАК АвансСтрока,
		|	ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.ВалютаСтрока КАК СТРОКА(150)) КАК ВалютаСтрока,
		|	ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.АвансРеглСтрока КАК СТРОКА(150)) КАК АвансРеглСтрока,
		|	ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.АвансУпрСтрока КАК СТРОКА(150)) КАК АвансУпрСтрока,
		|	ВТ_ТаблицаПредобработка.Партнер КАК Партнер,
		|	ВТ_ТаблицаПредобработка.Контрагент КАК Контрагент,
		|   ВТ_ТаблицаПредобработка.ДатаДокумента КАК ДатаДокумента,
		|   ВТ_ТаблицаПредобработка.НомерСтроки КАК НомерСтроки,
		|   ВТ_ТаблицаПредобработка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|   ВТ_ТаблицаПредобработка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|   ВТ_ТаблицаПредобработка.НомерДокумента КАК НомерДокумента,
		//|	ВТ_ТаблицаПредобработка.Ссылка КАК Валюта,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.ТипОбъектаРасчетовСтрока КАК СТРОКА(150))) = ""По договорам""
		|			ТОГДА NULL
		|		ИНАЧЕ ВЫБОР
		|				КОГДА (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.НомерЗаказаСтрока КАК СТРОКА(150))) = """"
		|						ИЛИ ВТ_ТаблицаПредобработка.ДатаЗаказаСтрока = """"
		|					ТОГДА NULL
		|				ИНАЧЕ ДокументЗаказа.Ссылка
		|			КОНЕЦ
		|	КОНЕЦ КАК Заказ,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.ТипОбъектаРасчетовСтрока КАК СТРОКА(150))) = ""По договорам""
		|			ТОГДА ВТ_ТаблицаПредобработка.ДоговорПоНомеруДате
		|		ИНАЧЕ ВЫБОР
		|				КОГДА (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.НомерЗаказаСтрока КАК СТРОКА(150))) = """"
		|						ИЛИ ВТ_ТаблицаПредобработка.ДатаЗаказаСтрока = """"
		|					ТОГДА NULL
		|				ИНАЧЕ ДокументЗаказа.Договор
		|			КОНЕЦ
		|	КОНЕЦ КАК Договор,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.ТипОбъектаРасчетовСтрока КАК СТРОКА(150))) = ""По договорам""
		|			ТОГДА ВТ_ТаблицаПредобработка.ДоговорПоНомеруДате.ГруппаФинансовогоУчета
		|		ИНАЧЕ ВЫБОР
		|				КОГДА (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.НомерЗаказаСтрока КАК СТРОКА(150))) = """"
		|						ИЛИ ВТ_ТаблицаПредобработка.ДатаЗаказаСтрока = """"
		|					ТОГДА NULL
		|				ИНАЧЕ ДокументЗаказа.ГруппаФинансовогоУчета
		|			КОНЕЦ
		|	КОНЕЦ КАК ГФУ,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.ТипОбъектаРасчетовСтрока КАК СТРОКА(150))) = ""По договорам""
		|			ТОГДА ВТ_ТаблицаПредобработка.ДоговорПоНомеруДате.Подразделение
		|		ИНАЧЕ ВЫБОР
		|				КОГДА (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.НомерЗаказаСтрока КАК СТРОКА(150))) = """"
		|						ИЛИ ВТ_ТаблицаПредобработка.ДатаЗаказаСтрока = """"
		|					ТОГДА NULL
		|				ИНАЧЕ ДокументЗаказа.Подразделение
		|			КОНЕЦ
		|	КОНЕЦ КАК Подразделение,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.ТипОбъектаРасчетовСтрока КАК СТРОКА(150))) = ""По договорам""
		|			ТОГДА ВТ_ТаблицаПредобработка.ДоговорПоНомеруДате.НалогообложениеНДС
		|		ИНАЧЕ ВЫБОР
		|				КОГДА (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.НомерЗаказаСтрока КАК СТРОКА(150))) = """"
		|						ИЛИ ВТ_ТаблицаПредобработка.ДатаЗаказаСтрока = """"
		|					ТОГДА NULL
		|				ИНАЧЕ ДокументЗаказа.НалогообложениеНДС
		|			КОНЕЦ
		|	КОНЕЦ КАК НалогообложениеНДС,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.ТипОбъектаРасчетовСтрока КАК СТРОКА(150))) = ""По договорам""
		|			ТОГДА ВТ_ТаблицаПредобработка.ДоговорПоНомеруДате.ВалютаВзаиморасчетов
		|		ИНАЧЕ ВЫБОР
		|				КОГДА (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.НомерЗаказаСтрока КАК СТРОКА(150))) = """"
		|						ИЛИ ВТ_ТаблицаПредобработка.ДатаЗаказаСтрока = """"
		|					ТОГДА NULL
		|				ИНАЧЕ ДокументЗаказа.Валюта
		|			КОНЕЦ
		|	КОНЕЦ КАК ВалютаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.ТипОбъектаРасчетовСтрока КАК СТРОКА(150))) = ""По договорам""
		|			ТОГДА ВТ_ТаблицаПредобработка.ДоговорПоНомеруДате.ПорядокРасчетов
		|		ИНАЧЕ ВЫБОР
		|				КОГДА (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.НомерЗаказаСтрока КАК СТРОКА(150))) = """"
		|						ИЛИ ВТ_ТаблицаПредобработка.ДатаЗаказаСтрока = """"
		|					ТОГДА NULL
		|				ИНАЧЕ ДокументЗаказа.Договор.ПорядокРасчетов
		|			КОНЕЦ
		|	КОНЕЦ КАК ТипОбъектовРасчетов
		|ИЗ
		|	ВТ_ТаблицаПредобработка КАК ВТ_ТаблицаПредобработка
		|		ЛЕВОЕ СОЕДИНЕНИЕ &ДокументЗаказа КАК ДокументЗаказа
		|		ПО ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.НомерЗаказаСтрока КАК Строка(30)) = ДокументЗаказа.НомерПоДанным#ПризнакОтношений#а 
		|			И ВТ_ТаблицаПредобработка.ДатаЗаказаСтрока = ДокументЗаказа.ДатаПоДанным#ПризнакОтношений#а 
		|			И ВТ_ТаблицаПредобработка.Партнер = ДокументЗаказа.Партнер
		|           И ДокументЗаказа.Договор.ПометкаУдаления = ЛОЖЬ
		|				И (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.ТипОбъектаРасчетовСтрока КАК СТРОКА(150))) = ""По заказам""
		|				И (ВЫРАЗИТЬ(ВТ_ТаблицаПредобработка.НомерЗаказаСтрока КАК СТРОКА(150))) <> """"";		
		
		Если РежимОбработки = "ЗагрузкаАвансовПоставщикам" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПризнакОтношений#", "Поставщик");    
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументЗаказа", "Документ.ЗаказПоставщику");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПризнакОтношений#", "Клиент");   
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументЗаказа", "Документ.ЗаказКлиента");
		КонецЕсли; 
		
		Результат = Запрос.Выполнить().Выгрузить(); 
		
		Массив = Результат.ВыгрузитьКолонку("НомерСтроки");
		МассивБезДублей =  ОбщегоНазначенияКлиентСервер.СвернутьМассив(Массив);
		
		Для Каждого СтрокаМассива  Из МассивБезДублей Цикл
			Отбор = Новый Структура();
			Отбор.Вставить("НомерСтроки",СтрокаМассива);
			НайденныеСтроки  = Результат.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество()>1  Тогда 
				
				Для Счетчик = 1   ПО НайденныеСтроки.Количество()-1  Цикл
					НайденнаяСтрока =  Результат.Найти(СтрокаМассива,"НомерСтроки");
					Результат.Удалить(НайденнаяСтрока);
				КонецЦикла;	
				
				СтрокаДляРедактирования =  Результат.Найти(СтрокаМассива,"НомерСтроки");
				СтрокаДляРедактирования.Договор = Неопределено; 
				СтрокаДляРедактирования.ТипОбъектовРасчетов = Неопределено;
				СтрокаДляРедактирования.ГФУ = Неопределено;
				СтрокаДляРедактирования.Подразделение = Неопределено;
				СтрокаДляРедактирования.НалогообложениеНДС = Неопределено; 
				СтрокаДляРедактирования.ВалютаВзаиморасчетов = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		
	КонецЕсли; 
	
	
	ЭтотОбъект[ИмяРабочейТаблицы].Загрузить(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузку(Команда)
	
	ВыполнитьЗагрузкуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуНаСервере()
	
	
	Если РежимОбработки = "ЗагрузкаЗадолженностиПоставщикам" ИЛИ РежимОбработки = "ЗагрузкаЗадолженностиКлиентов" Тогда 
		ВыполнитьЗагрузкуЗадолженности();
	ИначеЕсли РежимОбработки = "ЗагрузкаАвансовПоставщикам" ИЛИ РежимОбработки = "ЗагрузкаАвансовКлиентов" Тогда
		ВыполнитьЗагрузкуАвансов();
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуЗадолженности()
	
	ТаблицаЗаписиРачетовСПартнерами = Новый ТаблицаЗначений; 
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("Партнер");   
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("Контрагент");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("Договор");     
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("Сумма");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("ДатаПлатежа");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("СуммаРегл");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("СуммаУпр");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("ОбъектРасчетов");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("ДокументРасчетов");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("ОтложенныйДоходНУ");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("ОтложенныйРасходНУ");	
	
	ДатаПервичногоДокумента = Дата("20231231");
	Для Каждого СтрокаЗадолженности Из ТЧДляЗагрузкиЗадолженности Цикл
		
		ПервичныйДокумент = Документы.ПервичныйДокумент.СоздатьДокумент();
		ПервичныйДокумент.Дата           = СтрокаЗадолженности.ДатаДокумента;
		ПервичныйДокумент.Организация    = Организация;
		ПервичныйДокумент.Контрагент     = СтрокаЗадолженности.Контрагент;
		ПервичныйДокумент.Договор        = СтрокаЗадолженности.Договор;
		ПервичныйДокумент.Валюта         = СтрокаЗадолженности.ВалютаВзаиморасчетов;
		ПервичныйДокумент.СуммаДокумента = СтрокаЗадолженности.СуммаСтрока;
		ПервичныйДокумент.Партнер        = СтрокаЗадолженности.Партнер;
		ПервичныйДокумент.Подразделение  = СтрокаЗадолженности.Подразделение;
		Если ЗначениеЗаполнено(СтрокаЗадолженности.НомерДокумента) Тогда
		ПервичныйДокумент.Номер  = СтрокаЗадолженности.НомерДокумента;	
		КонецЕсли;		
		
		Если РежимОбработки = "ЗагрузкаЗадолженностиПоставщикам" Тогда
			ТипПервичногоДокумента = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыПервичныхДокументов.ПриобретениеУПоставщика");
		    ПервичныйДокумент.НомерВходящегоДокумента = СтрокаЗадолженности.НомерВходящегоДокумента;
		    ПервичныйДокумент.ДатаВходящегоДокумента  = СтрокаЗадолженности.ДатаВходящегоДокумента;

		ИначеЕсли РежимОбработки = "ЗагрузкаЗадолженностиКлиентов" Тогда
			ТипПервичногоДокумента = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыПервичныхДокументов.РеализацияКлиенту"); 
		КонецЕсли;
		
		ПервичныйДокумент.ТипПервичногоДокумента = ТипПервичногоДокумента;
		ПервичныйДокумент.СуммаРегл              = СтрокаЗадолженности.СуммаРеглСтрока;
		ПервичныйДокумент.СуммаУпр               = СтрокаЗадолженности.СуммаУпрСтрока;
		ПервичныйДокумент.ГруппаФинансовогоУчета = СтрокаЗадолженности.ГФУ;
		ПервичныйДокумент.ПорядокРасчетов        = СтрокаЗадолженности.ТипОбъектовРасчетов;
		ПервичныйДокумент.НалогообложениеНДС     = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС");
		ПервичныйДокумент.ВалютаВзаиморасчетов   = СтрокаЗадолженности.ВалютаВзаиморасчетов;
		
		Попытка
			ПервичныйДокумент.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись первичного документа'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));  
			
			СтрокаЗадолженности.СтатусЗагрузки = ИнформацияОбОшибке();
			Продолжить;
		КонецПопытки;
		
		СтрокаЗадолженности.ПервичныйДокумент = ПервичныйДокумент.Ссылка;
		
		//Если СтрокаЗадолженности.ТипОбъектовРасчетов = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыОбъектовРасчетов.Заказ") Тогда
		Если СтрокаЗадолженности.ТипОбъектаРасчетовСтрока = "Заказ" Тогда
			
			
			Если РежимОбработки = "ЗагрузкаЗадолженностиПоставщикам" Тогда
				ДокументЗаказ = Документы.ЗаказПоставщику.СоздатьДокумент(); 
				ДокументЗаказ.Статус = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.СтатусыЗаказовПоставщикам.Согласован");   
				ДокументЗаказ.ХозяйственнаяОперация = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика");
			ИначеЕсли РежимОбработки = "ЗагрузкаЗадолженностиКлиентов" Тогда
				ДокументЗаказ = Документы.ЗаказКлиента.СоздатьДокумент(); 
				ДокументЗаказ.Статус = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению");   
				ДокументЗаказ.ХозяйственнаяОперация = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ХозяйственныеОперации.РеализацияКлиенту");
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(ДокументЗаказ, СтрокаЗадолженности, "Партнер, Контрагент, Соглашение, Договор"); 
			ДокументЗаказ.Дата                   = ДатаПервичногоДокумента;
			ДокументЗаказ.Валюта                 = СтрокаЗадолженности.ВалютаВзаиморасчетов;
			ДокументЗаказ.Организация            = Организация;
			ДокументЗаказ.Приоритет              = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
			ДокументЗаказ.НалогообложениеНДС     = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС");
			ДокументЗаказ.ГруппаФинансовогоУчета = СтрокаЗадолженности.ГФУ; 
			
			Попытка
				ДокументЗаказ.Записать();
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись заказа'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));  
				
				СтрокаЗадолженности.СтатусЗагрузки = ИнформацияОбОшибке();
				Продолжить;
			КонецПопытки;
			
			СтрокаЗадолженности.Заказ = ДокументЗаказ.Ссылка;  
			
			
		КонецЕсли;
		
		СтрокаЗаписи = ТаблицаЗаписиРачетовСПартнерами.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаписи, СтрокаЗадолженности, "Партнер, Контрагент, Договор, ВалютаВзаиморасчетов");
		СтрокаЗаписи.Сумма       = СтрокаЗадолженности.СуммаСтрока;
		СтрокаЗаписи.ДатаПлатежа = СтрокаЗадолженности.ДатаПлатежаСтрока;
		СтрокаЗаписи.СуммаРегл   = СтрокаЗадолженности.СуммаРеглСтрока;
		СтрокаЗаписи.СуммаУпр    = СтрокаЗадолженности.СуммаУпрСтрока;
		
		//Если СтрокаЗадолженности.ТипОбъектовРасчетов = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыОбъектовРасчетов.Заказ") Тогда 
		Если СтрокаЗадолженности.ТипОбъектаРасчетовСтрока = "Заказ" Тогда
			СтрокаЗаписи.ОбъектРасчетов = ДокументЗаказ.Ссылка;			
		Иначе
			СтрокаЗаписи.ОбъектРасчетов = СтрокаЗадолженности.Договор;
		КонецЕсли;
		
		СтрокаЗаписи.ДокументРасчетов   = ПервичныйДокумент.Ссылка;
		СтрокаЗаписи.ОтложенныйДоходНУ  = СтрокаЗадолженности.ОтложенныйДоходНУСтрока;
		СтрокаЗаписи.ОтложенныйРасходНУ = СтрокаЗадолженности.ОтложенныйРасходНУСтрока;
		
		СтрокаЗадолженности.СтатусЗагрузки = "Объект загружен";
	КонецЦикла;
	
	ДокументВводОстатковВзаиморасчетов = ВводОстатковВзаиморасчетов.ПолучитьОбъект();
	ДокументВводОстатковВзаиморасчетов.РасчетыСПартнерами.Загрузить(ТаблицаЗаписиРачетовСПартнерами); 
	
	Попытка
		ДокументВводОстатковВзаиморасчетов.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись заказа'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));  
		
		ВызватьИсключение;	
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуАвансов()
	
	
	ТаблицаЗаписиРачетовСПартнерами = Новый ТаблицаЗначений; 
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("Партнер");   
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("Контрагент");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("Договор");     
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("Сумма");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("ДатаПлатежа");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("СуммаРегл");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("СуммаУпр");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("ОбъектРасчетов");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("ДокументРасчетов");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("ОтложенныйДоходНУ");
	ТаблицаЗаписиРачетовСПартнерами.Колонки.Добавить("ОтложенныйРасходНУ");	
	
	ДатаПервичногоДокумента = Дата("20231231");
	Для Каждого СтрокаАвансов Из ТЧДляЗагрузкиАвансов Цикл 
		//Если СтрокаАвансов.ТипОбъектаРасчетовСтрока  =  "По договорам" Тогда   
		//	СтрокаАвансов.Договор=НайтиДоговор(СтрокаАвансов.НомерДоговораСтрока,СтрокаАвансов.ДатаДоговораСтрока);
		//	СтрокаАвансов.Заказ	 = Документы.ЗаказПоставщику.ПустаяСсылка(); 
		//КонецЕсли;
		
		
		ПервичныйДокумент = Документы.ПервичныйДокумент.СоздатьДокумент();
		ПервичныйДокумент.Дата           = СтрокаАвансов.ДатаДокумента;
		ПервичныйДокумент.Организация    = Организация;
		ПервичныйДокумент.Контрагент     = СтрокаАвансов.Контрагент;
		ПервичныйДокумент.Договор        = СтрокаАвансов.Договор;
		ПервичныйДокумент.Валюта         = Справочники.Валюты.НайтиПоНаименованию(СтрокаАвансов.ВалютаСтрока);
		ПервичныйДокумент.СуммаДокумента = СтрокаАвансов.АвансСтрока;
		ПервичныйДокумент.Партнер        = СтрокаАвансов.Партнер;
		ПервичныйДокумент.Подразделение  = СтрокаАвансов.Подразделение; 
		Если ЗначениеЗаполнено(СтрокаАвансов.НомерДокумента) Тогда
		ПервичныйДокумент.Номер  = СтрокаАвансов.НомерДокумента;	
		КонецЕсли;
		
		Если РежимОбработки = "ЗагрузкаАвансовПоставщикам" Тогда
			ТипПервичногоДокумента = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику");
		ИначеЕсли РежимОбработки = "ЗагрузкаАвансовКлиентов" Тогда
			ТипПервичногоДокумента = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыПервичныхДокументов.ОплатаОтКлиента");
		КонецЕсли;
		
		ПервичныйДокумент.ТипПервичногоДокумента  = ТипПервичногоДокумента;
		ПервичныйДокумент.СуммаРегл               = СтрокаАвансов.АвансРеглСтрока;
		ПервичныйДокумент.СуммаУпр                = СтрокаАвансов.АвансУпрСтрока;
		ПервичныйДокумент.ГруппаФинансовогоУчета  = СтрокаАвансов.ГФУ;
		ПервичныйДокумент.ПорядокРасчетов         = СтрокаАвансов.ТипОбъектовРасчетов;
		ПервичныйДокумент.НалогообложениеНДС      = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС");
		//ПервичныйДокумент.НалогообложениеНДС    = СтрокаАвансов.НалогообложениеНДС;
		ПервичныйДокумент.ВалютаВзаиморасчетов    = СтрокаАвансов.ВалютаВзаиморасчетов;
		ПервичныйДокумент.НомерВходящегоДокумента = СтрокаАвансов.НомерВходящегоДокумента;
		ПервичныйДокумент.ДатаВходящегоДокумента  = СтрокаАвансов.ДатаВходящегоДокумента;
		
		Попытка
			ПервичныйДокумент.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись первичного документа'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));  
			
			СтрокаАвансов.СтатусЗагрузки = ИнформацияОбОшибке();
			Продолжить;
		КонецПопытки;
		
		СтрокаАвансов.ПервичныйДокумент = ПервичныйДокумент.Ссылка;
		СтрокаАвансов.СтатусЗагрузки = "Объект загружен";
		
		СтрокаЗаписи = ТаблицаЗаписиРачетовСПартнерами.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаписи, СтрокаАвансов, "Партнер, Контрагент, ВалютаВзаиморасчетов");
		СтрокаЗаписи.Сумма = СтрокаАвансов.АвансСтрока; 
		//СтрокаЗаписи.ДатаПлатежа = СтрокаАвансов.ДатаЗаказаСтрока;
		СтрокаЗаписи.СуммаРегл = СтрокаАвансов.АвансРеглСтрока;
		СтрокаЗаписи.СуммаУпр = СтрокаАвансов.АвансУпрСтрока;
		
		Если СтрокаАвансов.ТипОбъектовРасчетов = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ПорядокРасчетов.ПоЗаказам") Тогда
			СтрокаЗаписи.ОбъектРасчетов = СтрокаАвансов.Заказ;		
		Иначе
			СтрокаЗаписи.ОбъектРасчетов = СтрокаАвансов.Договор; 
			
		КонецЕсли;
		
		СтрокаЗаписи.ДокументРасчетов = ПервичныйДокумент.Ссылка; 	
		
	КонецЦикла;
	
	ДокументВводОстатковВзаиморасчетов = ВводОстатковВзаиморасчетов.ПолучитьОбъект();  
	ДокументВводОстатковВзаиморасчетов.РасчетыСПартнерами.Загрузить(ТаблицаЗаписиРачетовСПартнерами); 
	
	Попытка
		ДокументВводОстатковВзаиморасчетов.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись заказа'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));  
		
		ВызватьИсключение;	
	КонецПопытки;
	
	
	
	
КонецПроцедуры   

&НаСервере
Функция НайтиДоговор(Номер,Дата)
	
	Запрос = Новый Запрос;
	
	// Установка значений параметров
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Дата = &Дата
	|	И ДоговорыКонтрагентов.Номер = &Номер";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	// Выборка
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка ;
	КонецЦикла;
	
	
КонецФункции


&НаКлиенте
Процедура ТЧДляЗагрузкиАвансовДоговорПриИзменении(Элемент)
	
	ТекущийСтрока = Элементы.ТЧДляЗагрузкиАвансов.ТекущиеДанные;
	ЗаполнитьСтрокуТЧ(ТекущийСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТЧДляЗагрузкиЗадолженностиДоговорПриИзменении(Элемент)
	ТекущийСтрока = Элементы.ТЧДляЗагрузкиЗадолженности.ТекущиеДанные;
	ЗаполнитьСтрокуТЧ(ТекущийСтрока);
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьСтрокуТЧ(ТекущийСтрока)
	СтруктураДоговора = ПолучитьРеквезитыДоговора(ТекущийСтрока.Договор);  
	ТекущийСтрока.Подразделение        = СтруктураДоговора.Подразделение;
	ТекущийСтрока.ГФУ                  = СтруктураДоговора.ГруппаФинансовогоУчета;
	ТекущийСтрока.НалогообложениеНДС   = СтруктураДоговора.НалогообложениеНДС;
	ТекущийСтрока.ТипОбъектовРасчетов  = СтруктураДоговора.ПорядокРасчетов;
	ТекущийСтрока.ВалютаВзаиморасчетов = СтруктураДоговора.ВалютаВзаиморасчетов;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьРеквезитыДоговора (ТекущийДоговор)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийДоговор,"
	|ГруппаФинансовогоУчета,
	|НалогообложениеНДС,
	|ВалютаВзаиморасчетов,
	|ПорядокРасчетов,
	|Подразделение");	
КонецФункции  

