
&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	// Вставить содержимое обработчика.
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'Exсel'; en = 'Exсel'") + "(*.xlsx)|*.xlsx";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если Не ДиалогОткрытияФайла.Выбрать() Тогда
		Предупреждение(НСтр("ru = 'Файл не выбран!'; en = 'File not selected!'"));
		Возврат;
	КонецЕсли;
	
	Объект.ИмяФайла = ДиалогОткрытияФайла.ПолноеИмяФайла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Данные = Новый ДвоичныеДанные(Объект.ИмяФайла);
	//лФайл = ПоместитьВоВременноеХранилище(лДиалогОткрытияФайла.ПолноеИмяФайла, ЭтаФорма.УникальныйИдентификатор);
	Ид = ПоместитьВоВременноеХранилище(Данные,Новый УникальныйИдентификатор);	
	ЗагрузитьНаСервере(Ид); 
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере(Ид)
	Файл = ПолучитьИмяВременногоФайла("xlsx");
	ДвоичДанные = ПолучитьИзВременногоХранилища(Ид);
	ДвоичДанные.Записать(Файл);
	
	ТЗРезультат=ПолучитьТЗизФайлаЕксель(Файл);
	
	
	Для Каждого Строка  Из ТЗРезультат  Цикл 
		Строка.ВидПроверки = Справочники.лимсВидыПроверок.НайтиПоНаименованию(СокрЛП(Строка.ВидПроверки)); 
		Строка.Показатель = Справочники.лимсПоказателиКачества.НайтиПоНаименованию(СокрЛП(Строка.Показатель));
		Если Строка.ЗначениеФакт = "ОК" ИЛИ Строка.ЗначениеФакт = "Ок"  ИЛИ Строка.ЗначениеФакт = "ок" Тогда 
			Строка.ЗначениеФакт  =  Истина; 
		ИначеЕсли Строка.ЗначениеФакт = "НЕТ" Тогда 
			Строка.ЗначениеФакт  =  Ложь;
		КонецЕсли;			
		Строка.СтатусСерии  = Справочники.лимсСтатусСерии.НайтиПоНаименованию(СокрЛП(Строка.СтатусСерии));		
		Для каждого ЭлементПеречисления Из Метаданные.Перечисления.лимсСтатусКонтроля.ЗначенияПеречисления Цикл
			Если ЭлементПеречисления.Синоним = СокрЛП(Строка.СтатусКонтроля) Тогда
				Строка.СтатусКонтроля = Перечисления.лимсСтатусКонтроля[ЭлементПеречисления.Имя];
				Прервать;
			КонецЕсли; 
		КонецЦикла;		
	КонецЦикла;  
	
	СоздатьДокумент (ТЗРезультат);
	
	
КонецПроцедуры  

&НаСервере
Процедура СоздатьДокумент (ТЗРезультат)
	
	ТЗНумерация = ТЗРезультат.Скопировать(,"Нумерация");
	ТЗНумерация.Свернуть("Нумерация");
	Для Каждого Номер  Из ТЗНумерация Цикл
		МассивТаблицы =ТЗРезультат.НайтиСтроки(Новый Структура("Нумерация", Номер.Нумерация));
		
		Отказ = Ложь;
		ДокументОбъектКонтроляКачества = Документы.лимсРегистрацияРезультатовКонтроля.СоздатьДокумент();  
		ЗаполнитьДокументКонтроляКачестваОсновнымиДанными(ДокументОбъектКонтроляКачества, МассивТаблицы, Отказ);
		Если Отказ Тогда 
			Продолжить;;
		КонецЕсли; 
		
		
		Для Каждого СтрокаНормативы  Из МассивТаблицы Цикл
			ЗаполнитьНорматив(СтрокаНормативы.Показатель, ДокументОбъектКонтроляКачества.Факты, ДокументОбъектКонтроляКачества.Нормативы);	
		КонецЦикла;
		
		ДокументОбъектКонтроляКачества.СтатусКонтроля = МассивТаблицы[0].СтатусКонтроля;  
		ДокументОбъектКонтроляКачества.СтатусСерии = МассивТаблицы[0].СтатусСерии;
		ДокументОбъектКонтроляКачества.Комментарий =  "Создано загрузчиком";
		
		ДокументОбъектКонтроляКачества.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры


Функция ПолучитьТЗизФайлаЕксель(ИмяФайлаЗагрузки,знач НачСтрока=2,знач НачКолонка=1,знач КонСтрока=0,знач КонКолонка=8)
	
	ТЗ =  Новый ТаблицаЗначений;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ИмяФайлаЗагрузки,СпособЧтенияЗначенийТабличногоДокумента.Значение);
	
	Область = ТабДок.ПолучитьОбласть();
	КоличествоСтрок      = Область.ВысотаТаблицы;
	КоличествоКолонок = Область.ШиринаТаблицы;
	
	КоличествоСтрок = ?(КонСтрока=0,КоличествоСтрок,Мин(КоличествоСтрок,КонСтрока));
	КоличествоКолонок = ?(КонКолонка=0,КоличествоКолонок,Мин(КоличествоКолонок,КонКолонка));
	
	//Для нКолонка = НачКолонка По КоличествоКолонок Цикл
	//    ТЗ.Колонки.Добавить("Колонка" + СокрЛП(нКолонка));
	//КонецЦикла;  
	
	ТЗ.Колонки.Добавить("Партия");  
	ТЗ.Колонки.Добавить("ВидПроверки");
	ТЗ.Колонки.Добавить("Материал");
	ТЗ.Колонки.Добавить("СтатусСерии");
	ТЗ.Колонки.Добавить("СтатусКонтроля");
	ТЗ.Колонки.Добавить("Показатель"); 
	ТЗ.Колонки.Добавить("ЗначениеФакт"); 
	ТЗ.Колонки.Добавить("Нумерация"); 
	
	Для нСтрока = НачСтрока По КоличествоСтрок Цикл
		НоваяСтрока = ТЗ.Добавить();
		Для нКолонка = НачКолонка По КоличествоКолонок Цикл
			Область = ТабДок.Область(нСтрока,нКолонка,нСтрока,нКолонка);
			Если Область.СодержитЗначение Тогда
				НоваяСтрока.Установить(нКолонка-1,Область.Значение);
			Иначе
				НоваяСтрока.Установить(нКолонка-1,СокрЛП(Область.Текст));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗ;
КонецФункции

&НаСервере
Функция ПолучитьДополнительныеДанные(Отказ,НомерСерии) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
	//"ВЫБРАТЬ
	//|	СерииНоменклатуры.Ссылка КАК Ссылка
	//|ПОМЕСТИТЬ ВТ_Серии
	//|ИЗ
	//|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	//|ГДЕ
	//|	СерииНоменклатуры.Номер = &НомерСерии
	//|; 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	afmrПартииНоменклатуры.Номенклатура
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.afmrПартииНоменклатуры КАК afmrПартииНоменклатуры
	|		ПО СерииНоменклатуры.afmrПартияНоменклатуры = afmrПартииНоменклатуры.Ссылка
	|ГДЕ
	|	afmrПартииНоменклатуры.Код = &Номер 
	|УПОРЯДОЧИТЬ ПО
	|	СерииНоменклатуры.Номер
	|;
	|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ДвиженияСерийТоваров.Номенклатура КАК Номенклатура,
	//|	ДвиженияСерийТоваров.Серия КАК Серия
	//|ПОМЕСТИТЬ ВТ_Номенклатура
	//|ИЗ
	//|	ВТ_Серии КАК ВТ_Серии
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияСерийТоваров КАК ДвиженияСерийТоваров
	//|		ПО (ВТ_Серии.Ссылка = ДвиженияСерийТоваров.Серия)
	//|;
	//|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	лимсИсторияПримененияНормативовСрезПоследних.Регистратор КАК ПрограммаИспытаний,
	|	лимсИсторияПримененияНормативовСрезПоследних.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.лимсИсторияПримененияНормативов.СрезПоследних(
	|			,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					ВТ.Номенклатура
	|				ИЗ
	|					ВТ_Номенклатура КАК ВТ)) КАК лимсИсторияПримененияНормативовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
	|	ВТ_Номенклатура.Серия КАК Серия
	|ИЗ
	|	ВТ_Номенклатура КАК ВТ_Номенклатура";
	
	Запрос.УстановитьПараметр("Номер", НомерСерии);
	
	МассивРезультата = Запрос.ВыполнитьПакет();
	ВыборкаНТД = МассивРезультата[1].Выбрать(); 
	ВыборкаСерии = МассивРезультата[2].Выбрать();
	
	СтруктураРезультата = Новый Структура("НТД, Серия, Номенклатура");
	Если ВыборкаНТД.Следующий() Тогда
		СтруктураРезультата.НТД = ВыборкаНТД.ПрограммаИспытаний;
	КонецЕсли;
	
	Если ВыборкаСерии.Следующий() Тогда  
		СтруктураРезультата.Номенклатура = ВыборкаСерии.Номенклатура;
		СтруктураРезультата.Серия = ВыборкаСерии.Серия; 
	Иначе
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Выбранной партий не существует! %1",НомерСерии));
		Отказ = Истина;
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументКонтроляКачестваОсновнымиДанными(ДокументОбъектКонтроляКачества, МассивТаблицы,  Отказ)
	
	СтруктураДополнительныхДанных = ПолучитьДополнительныеДанные(Отказ,МассивТаблицы[0].Партия); 
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ДокументОбъектКонтроляКачества.ВидПроверки = МассивТаблицы[0].ВидПроверки; 
	ДокументОбъектКонтроляКачества.Организация = Объект.Организация;
	ДокументОбъектКонтроляКачества.Дата = ТекущаяДатаСеанса();
	//лимсКонтрольКачества.ПодборНТДПоОбъекту(ДокументОбъектКонтроляКачества, ДокументОбъектКонтроляКачества.Дата, ДокументОбъектКонтроляКачества.ВидПроверки, ДокументОбъектКонтроляКачества.Организация);
	//ОбновитьСостояниеНастройки_РегистрироватьИзмеряемыеВеличины();
	
	ДокументОбъектКонтроляКачества.НТД = СтруктураДополнительныхДанных.НТД; 
	ДокументОбъектКонтроляКачества.Серия = СтруктураДополнительныхДанных.Серия;
	ДокументОбъектКонтроляКачества.Номенклатура = СтруктураДополнительныхДанных.Номенклатура;
	
	ДокументОбъектКонтроляКачества.СтатусСерии = МассивТаблицы[0].СтатусСерии;	
	
	
	Если ЗначениеЗаполнено(ДокументОбъектКонтроляКачества.НТД) Тогда
		
		Нормативы = ДокументОбъектКонтроляКачества.НТД.Нормативы;
		
		ДокументОбъектКонтроляКачества.Нормативы.Загрузить(Нормативы.Выгрузить());
		ДокументОбъектКонтроляКачества.СписокНормативныхЗначенийПоказателей.Загрузить(ДокументОбъектКонтроляКачества.НТД.СписокНормативныхЗначенийПоказателей.Выгрузить());
		
		Для Каждого СтрокаНормативы Из Нормативы Цикл
			
			СтрокаФакты = ДокументОбъектКонтроляКачества.Факты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаФакты, СтрокаНормативы); 
			
			Для Каждого СтрокаМасива Из МассивТаблицы Цикл
				Если СтрокаНормативы.Показатель = СтрокаМасива.Показатель  Тогда 
					Если СтрокаМасива.ЗначениеФакт  = "Соответствие" Тогда  
					 СтрокаФакты.ЗначениеФакт = СтрокаНормативы.ЗначениеНорма;  	
					Иначе                                                   
					СтрокаФакты.ЗначениеФакт = СтрокаМасива.ЗначениеФакт; 
				    КонецЕсли;
					//ЗаполнитьНорматив(СтрокаНормативы.Показатель, ДокументОбъектКонтроляКачества.Факты, ДокументОбъектКонтроляКачества.Нормативы);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		РассчитатьПоказателиНаОснованииДругихПоказателей(Истина, , ДокументОбъектКонтроляКачества);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоказателиНаОснованииДругихПоказателей(ТолькоРассчитатьКонстанты = Ложь, ОбновитьДеревоПоФакту = Ложь, ДокументОбъектКонтроляКачества)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНорм", ДокументОбъектКонтроляКачества.Нормативы.Выгрузить());
	Запрос.УстановитьПараметр("НТД", ДокументОбъектКонтроляКачества.НТД);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТНормы.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТНормы.Показатель КАК Справочник.лимсПоказателиКачества) КАК Показатель,
	|	ТНормы.Методика КАК Методика
	|ПОМЕСТИТЬ Нормы
	|ИЗ
	|	&ТаблицаНорм КАК ТНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	лимсНормативноТехническаяДокументацияНормативы.Методика КАК Методика,
	|	лимсНормативноТехническаяДокументацияНормативы.Показатель КАК Показатель,
	|	МАКСИМУМ(лимсНормативноТехническаяДокументацияНормативы.ФормулаРасчета) КАК ФормулаРасчета
	|ПОМЕСТИТЬ НормативыПрограммыИспытаний
	|ИЗ
	|	Документ.лимсНормативноТехническаяДокументация.Нормативы КАК лимсНормативноТехническаяДокументацияНормативы
	|ГДЕ
	|	лимсНормативноТехническаяДокументацияНормативы.Ссылка = &НТД
	|
	|СГРУППИРОВАТЬ ПО
	|	лимсНормативноТехническаяДокументацияНормативы.Методика,
	|	лимсНормативноТехническаяДокументацияНормативы.Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Нормы.НомерСтроки КАК НомерСтроки,
	|	Нормы.Показатель КАК Показатель,
	|	Нормы.Методика КАК Методика,
	|	ЕСТЬNULL(НормативыПрограммыИспытаний.ФормулаРасчета, """") КАК ФормулаРасчета,
	|	лимсПоказателиКачества.ТипИзмеряемыхСвойств КАК ТипСвойств,
	|	лимсПоказателиКачества.ИдентификаторДляФормул КАК ИдентификаторДляФормул,
	|	лимсПоказателиКачества.РассчитываетсяПоФормуламОтДругихПоказателей КАК РассчитываетсяПоФормуламОтДругихПоказателей,
	|	лимсПоказателиКачества.ВидПоказателя.ТипПоказателя КАК ТипПоказателя,
	|	ЕСТЬNULL(лимсПоказателиКачества.ВидПоказателя.ДлинаЧисла, 0) КАК ДлинаЧисла,
	|	ЕСТЬNULL(лимсПоказателиКачества.ВидПоказателя.ТочностьЧисла, 0) КАК ТочностьЧисла,
	|	ЕСТЬNULL(лимсПоказателиКачества.ВидПоказателя.ЧислоНеотрицательное, ЛОЖЬ) КАК ЧислоНеотрицательное
	|ИЗ
	|	Нормы КАК Нормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ НормативыПрограммыИспытаний КАК НормативыПрограммыИспытаний
	|		ПО Нормы.Методика = НормативыПрограммыИспытаний.Методика
	|			И Нормы.Показатель = НормативыПрограммыИспытаний.Показатель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.лимсПоказателиКачества КАК лимсПоказателиКачества
	|		ПО Нормы.Показатель = лимсПоказателиКачества.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПоказателиДокумента = РезультатЗапроса.Выгрузить();
	
	ДанныеПоказателя = Новый Соответствие; 
	
	ИдентификаторыФормулПоПоказателям = ПоказателиДокумента.СкопироватьКолонки();
	ИдентификаторыФормулПоПоказателям.Колонки.Добавить("ИдентификаторИзФормулы", РезультатЗапроса.Колонки.ИдентификаторДляФормул.ТипЗначения);
	ИдентификаторыФормулПоПоказателям.Колонки.Добавить("ЗависимыйПоказатель", РезультатЗапроса.Колонки.Показатель.ТипЗначения);
	
	Для каждого Стр Из ПоказателиДокумента Цикл
		
		ДанныеПоказателяСтруктура = Новый Структура;
		ДанныеПоказателяСтруктура.Вставить("ЗначениеФакт", 0);
		ДанныеПоказателяСтруктура.Вставить("ЗначениеФактМин", 0);
		ДанныеПоказателяСтруктура.Вставить("ЗначениеФактМакс", 0);
		ДанныеПоказателяСтруктура.Вставить("Рассчитан", Ложь); // значение показателя рассчитано без ошибок
		ДанныеПоказателяСтруктура.Вставить("СписокИдентификаторовФормулы", Новый Массив);
		ДанныеПоказателяСтруктура.Вставить("ИндексСтрокиФакта", -1);
		ДанныеПоказателяСтруктура.Вставить("ТипПоказателя", Стр.ТипПоказателя);
		ДанныеПоказателяСтруктура.Вставить("ДлинаЧисла", Стр.ДлинаЧисла);
		ДанныеПоказателяСтруктура.Вставить("ТочностьЧисла", Стр.ТочностьЧисла);
		ДанныеПоказателяСтруктура.Вставить("ЧислоНеотрицательное", Стр.ЧислоНеотрицательное);
		ДанныеПоказателяСтруктура.Вставить("БылиОшибкиПриРасчете", Ложь); // признак, что при расчете была техническая ошибка - для исключения повторного расчета
		
		СтрокиФакта = ДокументОбъектКонтроляКачества.Факты.НайтиСтроки(Новый Структура("Методика, Показатель", Стр.Методика, Стр.Показатель));	
		Если СтрокиФакта.Количество() > 0 Тогда
			ДанныеПоказателяСтруктура.Вставить("ЗначениеФакт", СтрокиФакта[0].ЗначениеФакт);
			ДанныеПоказателяСтруктура.Вставить("ЗначениеФактМин", СтрокиФакта[0].ЗначениеФактМин);
			ДанныеПоказателяСтруктура.Вставить("ЗначениеФактМакс", СтрокиФакта[0].ЗначениеФактМакс);
			ДанныеПоказателяСтруктура.Вставить("ИндексСтрокиФакта", ДокументОбъектКонтроляКачества.Факты.Индекс(СтрокиФакта[0]));
		КонецЕсли;
		
		ДанныеПоказателя.Вставить(Стр.Показатель, ДанныеПоказателяСтруктура);
		
		Если Не Стр.РассчитываетсяПоФормуламОтДругихПоказателей = Истина
			Или Не ЗначениеЗаполнено(Стр.ФормулаРасчета) Тогда
			ДанныеПоказателя[Стр.Показатель].Рассчитан = Истина;
			Продолжить;
		КонецЕсли;	
		
		СписокИдентификаторовФормулы = лимсИзмерения.СписокИдентификаторовФомулы(Стр.ФормулаРасчета);
		ДанныеПоказателя[Стр.Показатель].СписокИдентификаторовФормулы = СписокИдентификаторовФормулы;
		
		Если СписокИдентификаторовФормулы.Количество() > 0 Тогда	
			Если НЕ ТолькоРассчитатьКонстанты Тогда
				Для каждого ИдентификаторИзФормулы Из СписокИдентификаторовФормулы Цикл	
					НовСтр = ИдентификаторыФормулПоПоказателям.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, Стр);
					НовСтр.ИдентификаторИзФормулы = ИдентификаторИзФормулы;	
				КонецЦикла;
			КонецЕсли;
		Иначе			
			НовСтр = ИдентификаторыФормулПоПоказателям.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИдентификаторыФормулПоПоказателям.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Табл.НомерСтроки КАК НомерСтроки,
	|	Табл.Показатель КАК Показатель,
	|	Табл.Методика КАК Методика,
	|	Табл.ФормулаРасчета КАК ФормулаРасчета,
	|	Табл.ИдентификаторИзФормулы КАК ИдентификаторИзФормулы
	|ПОМЕСТИТЬ ИдентификаторыФормулПоПоказателям
	|ИЗ
	|	&ИдентификаторыФормулПоПоказателям КАК Табл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Табл.Показатель КАК Показатель,
	|	Табл.ИдентификаторДляФормул КАК ИдентификаторДляФормул
	|ПОМЕСТИТЬ ПоказателиДокумента
	|ИЗ
	|	&ПоказателиДокумента КАК Табл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыФормулПоПоказателям.НомерСтроки КАК НомерСтроки,
	|	ИдентификаторыФормулПоПоказателям.Показатель КАК Показатель,
	|	ИдентификаторыФормулПоПоказателям.Методика КАК Методика,
	|	ИдентификаторыФормулПоПоказателям.ФормулаРасчета КАК ФормулаРасчета,
	|	ИдентификаторыФормулПоПоказателям.ИдентификаторИзФормулы КАК ИдентификаторИзФормулы,
	|	ЕСТЬNULL(ПоказателиДокумента.Показатель, ЗНАЧЕНИЕ(Справочник.лимсПоказателиКачества.ПустаяСсылка)) КАК ЗависимыйПоказатель,
	|	ПоказателиДокумента.ИдентификаторДляФормул КАК ИдентификаторДляФормул
	|ИЗ
	|	ИдентификаторыФормулПоПоказателям КАК ИдентификаторыФормулПоПоказателям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиДокумента КАК ПоказателиДокумента
	|		ПО ИдентификаторыФормулПоПоказателям.ИдентификаторИзФормулы = ПоказателиДокумента.ИдентификаторДляФормул
	|			И ИдентификаторыФормулПоПоказателям.Показатель <> ПоказателиДокумента.Показатель
	|ИТОГИ
	|	МАКСИМУМ(Показатель),
	|	МАКСИМУМ(Методика),
	|	МАКСИМУМ(ФормулаРасчета)
	|ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПоказателиДокумента", ПоказателиДокумента);
	Запрос.УстановитьПараметр("ИдентификаторыФормулПоПоказателям", ИдентификаторыФормулПоПоказателям);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтрокаПоказателя = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ФактическаяДатаПолученияРезультата = ТекущаяДатаСеанса();
	
	ИзмененныеСтроки = Новый Массив;
	
	БылРасчет = Истина;
	Пока БылРасчет Цикл
		
		БылРасчет = Ложь;
		
		Пока СтрокаПоказателя.Следующий() Цикл
			
			Если ДанныеПоказателя[СтрокаПоказателя.Показатель].Рассчитан
				Или ДанныеПоказателя[СтрокаПоказателя.Показатель].БылиОшибкиПриРасчете Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатРасчета = Неопределено;
			
			Формулы = Новый Структура("Формула, ФормулаМин, ФормулаМакс", 
			СтрокаПоказателя.ФормулаРасчета, СтрокаПоказателя.ФормулаРасчета, СтрокаПоказателя.ФормулаРасчета);
			
			РассчитыватьФактМинМакс = ДанныеПоказателя[СтрокаПоказателя.Показатель].ТипПоказателя = Перечисления.лимсТипыПоказателейКонтроля.Поддиапазон;
			
			ЭлементРасчета = СтрокаПоказателя.Выбрать();
			
			Пока ЭлементРасчета.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ЭлементРасчета.ЗависимыйПоказатель) 
					Или ЭлементРасчета.ИдентификаторИзФормулы = "" Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеЗависимогоПоказателя = ДанныеПоказателя[ЭлементРасчета.ЗависимыйПоказатель];
				
				Если ДанныеЗависимогоПоказателя.Рассчитан = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				Если РассчитыватьФактМинМакс Тогда
					Если ДанныеЗависимогоПоказателя.ТипПоказателя = Перечисления.лимсТипыПоказателейКонтроля.Поддиапазон Тогда
						ПодставитьЗначенияВФормулу(Формулы.ФормулаМин, ЭлементРасчета.ИдентификаторДляФормул, ДанныеЗависимогоПоказателя.ЗначениеФактМин);
						ПодставитьЗначенияВФормулу(Формулы.ФормулаМакс, ЭлементРасчета.ИдентификаторДляФормул, ДанныеЗависимогоПоказателя.ЗначениеФактМакс);
					Иначе
						ПодставитьЗначенияВФормулу(Формулы.ФормулаМин, ЭлементРасчета.ИдентификаторДляФормул, ДанныеЗависимогоПоказателя.ЗначениеФакт);
						ПодставитьЗначенияВФормулу(Формулы.ФормулаМакс, ЭлементРасчета.ИдентификаторДляФормул, ДанныеЗависимогоПоказателя.ЗначениеФакт);
					КонецЕсли;
				Иначе
					ПодставитьЗначенияВФормулу(Формулы.Формула, ЭлементРасчета.ИдентификаторДляФормул, ДанныеЗависимогоПоказателя.ЗначениеФакт);
				КонецЕсли;	
				
			КонецЦикла;	
			
			// Проверка все ли идентификаторы заменены на значения
			// В случае наличия не замененного идентификатора
			ИдентификаторыЗаменены = Истина;
			
			ФормулыДляПроверки = Новый Массив;
			Если РассчитыватьФактМинМакс Тогда
				ФормулыДляПроверки.Добавить(Формулы.ФормулаМин);
				ФормулыДляПроверки.Добавить(Формулы.ФормулаМакс);
			Иначе
				ФормулыДляПроверки.Добавить(Формулы.Формула);
			КонецЕсли;
			
			Для каждого ИД Из ДанныеПоказателя[СтрокаПоказателя.Показатель].СписокИдентификаторовФормулы Цикл
				
				Если Не ЗначениеЗаполнено(ИД) Тогда
					Продолжить;
				КонецЕсли;
				
				Для каждого Формула Из ФормулыДляПроверки Цикл
					Если СтрНайти(Формула, ИД) <> 0 Тогда	
						ИдентификаторыЗаменены = Ложь;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
				
				Если НЕ ИдентификаторыЗаменены Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ИдентификаторыЗаменены Тогда
				Если Не ТолькоРассчитатьКонстанты Тогда
					Если ДанныеПоказателя[СтрокаПоказателя.Показатель].ИндексСтрокиФакта >= 0 Тогда
						СтрокаФакта = ДокументОбъектКонтроляКачества.Факты[ДанныеПоказателя[СтрокаПоказателя.Показатель].ИндексСтрокиФакта];
						ОбнулитьЗначенияСтрокиФакта(СтрокаФакта);
					КонецЕсли;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].ЗначениеФакт = Неопределено;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].ЗначениеФактМин = 0;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].ЗначениеФактМакс = 0;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].Рассчитан = Ложь;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			БылиОшибкиПриРасчете = Ложь;
			
			Попытка
				
				РезультатРасчета = Неопределено;
				РезультатРасчетаМин = 0;
				РезультатРасчетаМакс = 0;
				
				Если РассчитыватьФактМинМакс Тогда	
					РезультатРасчетаМин  = ВычислитьЗначениеПоФормуле(Формулы.ФормулаМин, ДанныеПоказателя[СтрокаПоказателя.Показатель]);
					РезультатРасчетаМакс = ВычислитьЗначениеПоФормуле(Формулы.ФормулаМакс, ДанныеПоказателя[СтрокаПоказателя.Показатель]);			
				Иначе			
					РезультатРасчета = ВычислитьЗначениеПоФормуле(Формулы.Формула, ДанныеПоказателя[СтрокаПоказателя.Показатель]);			
				КонецЕсли;
				
				Если ДанныеПоказателя[СтрокаПоказателя.Показатель].ТипПоказателя = Перечисления.лимсТипыПоказателейКонтроля.ЗначениеИзСписка Тогда
					РезультатРасчетаЗначение = Справочники.лимсЗначенияПоказателейКачества.НайтиПоНаименованию(РезультатРасчета,,, СтрокаПоказателя.Показатель);
					Если НЕ ЗначениеЗаполнено(РезультатРасчетаЗначение) Тогда
						// Ошибка поиска
						ТекстСообщения = СтрШаблон("Ошибка поиска значения показателя %1 по расчитанному значению %2", 
						СтрокаПоказателя.Показатель,
						РезультатРасчета);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументОбъектКонтроляКачества.Ссылка);
						БылиОшибкиПриРасчете = Истина;
					Иначе
						РезультатРасчета = РезультатРасчетаЗначение;
					КонецЕсли;					
				КонецЕсли;
				
				Если Не БылиОшибкиПриРасчете Тогда
					
					Если ДанныеПоказателя[СтрокаПоказателя.Показатель].ИндексСтрокиФакта >= 0 Тогда
						СтрокаФакта = ДокументОбъектКонтроляКачества.Факты[ДанныеПоказателя[СтрокаПоказателя.Показатель].ИндексСтрокиФакта];
					Иначе
						СтрокаФакта = ДокументОбъектКонтроляКачества.Факты.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаФакта, СтрокаПоказателя);
						СтрокаФакта.ИзмененоВручную = Истина; 
						ДанныеПоказателя[СтрокаПоказателя.Показатель].ИндексСтрокиФакта = ДокументОбъектКонтроляКачества.Факты.Индекс(СтрокаФакта);
					КонецЕсли;
					
					//Если Не ТолькоРассчитатьКонстанты 
					//	Или (Не СтрокаФакта.ЗначениеФакт = РезультатРасчета И Не РассчитыватьФактМинМакс)
					//	Или (РассчитыватьФактМинМакс 
					//			И (Не СтрокаФакта.ЗначениеФактМин = РезультатРасчетаМин 
					//				Или Не СтрокаФакта.ЗначениеФактМакс = РезультатРасчетаМакс)) Тогда
					//	СтрокаНорм = ДокументОбъектКонтроляКачества.Нормативы[СтрокаПоказателя.НомерСтроки - 1];
					//	СтрокаФакта.ЗначениеФакт = РезультатРасчета;
					//	СтрокаФакта.ЗначениеФактМин = РезультатРасчетаМин;
					//	СтрокаФакта.ЗначениеФактМакс = РезультатРасчетаМакс;
					//	СтрокаФакта.ФактическаяДатаПолученияРезультата = ФактическаяДатаПолученияРезультата;
					//	
					//	ТаблицаПриОбновленииСоответствуетРасчетНаСервере(СтрокаНорм, СтрокаФакта);
					//	
					//	ИзмененныеСтроки.Добавить(СтрокаФакта);
					//КонецЕсли;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].ЗначениеФакт = СтрокаФакта.ЗначениеФакт;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].ЗначениеФактМин = СтрокаФакта.ЗначениеФактМин;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].ЗначениеФактМакс = СтрокаФакта.ЗначениеФактМакс;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].Рассчитан = Истина;
					БылРасчет = Истина;
					
				ИначеЕсли Не ТолькоРассчитатьКонстанты Тогда
					
					Если ДанныеПоказателя[СтрокаПоказателя.Показатель].ИндексСтрокиФакта >= 0 Тогда
						СтрокаФакта = ДокументОбъектКонтроляКачества.Факты[ДанныеПоказателя[СтрокаПоказателя.Показатель].ИндексСтрокиФакта];
						ОбнулитьЗначенияСтрокиФакта(СтрокаФакта);
					КонецЕсли;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].ЗначениеФакт = Неопределено;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].ЗначениеФактМин = 0;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].ЗначениеФактМакс = 0;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].Рассчитан = Ложь;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].БылиОшибкиПриРасчете = Истина;
					
				КонецЕсли;
				
			Исключение
				
				ТекстСообщения = СтрШаблон("Ошибка расчета значения показателя %1 по формуле.
				|Подробнее %2", 
				СтрокаПоказателя.Показатель,
				ОписаниеОшибки());
				
				Если Не ТолькоРассчитатьКонстанты Тогда		
					
					Если ДанныеПоказателя[СтрокаПоказателя.Показатель].ИндексСтрокиФакта >= 0 Тогда
						СтрокаФакта = ДокументОбъектКонтроляКачества.Факты[ДанныеПоказателя[СтрокаПоказателя.Показатель].ИндексСтрокиФакта];
						ОбнулитьЗначенияСтрокиФакта(СтрокаФакта);
					КонецЕсли;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].ЗначениеФакт = Неопределено;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].ЗначениеФактМин = 0;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].ЗначениеФактМакс = 0;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].Рассчитан = Ложь;
					ДанныеПоказателя[СтрокаПоказателя.Показатель].БылиОшибкиПриРасчете = Истина;
					
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЦикла;
		
		СтрокаПоказателя.Сбросить();
		
	КонецЦикла;
	
	//Если ОбновитьДеревоПоФакту Тогда
	//
	//	ТаблицаФактаИзмененная = ДокументОбъектКонтроляКачества.Факты.Выгрузить(ИзмененныеСтроки, 
	//		"Методика,Показатель,ЗначениеФакт,ЗначениеФактМин,ЗначениеФактМакс,СоответствуетНормативу,ФактическаяДатаПолученияРезультата");
	//	
	//	Для Каждого СтрокаТипПоказателя Из ДеревоНормативов.ПолучитьЭлементы() Цикл		
	//		Для Каждого СтрокаПоказатель Из СтрокаТипПоказателя.ПолучитьЭлементы()  Цикл		
	//			Отбор = Новый Структура("Методика,Показатель");
	//			ЗаполнитьЗначенияСвойств(Отбор, СтрокаПоказатель); 
	//			СтрокиФакта = ТаблицаФактаИзмененная.НайтиСтроки(Отбор);
	//			Если СтрокиФакта.Количество() > 0 Тогда
	//				ЗаполнитьЗначенияСвойств(СтрокаПоказатель, СтрокиФакта[0],,	"Методика,Показатель");
	//			КонецЕсли;					
	//		КонецЦикла;	
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВычислитьЗначениеПоФормуле(Формула, ДанныеПоказателя)
	
	Формула = СокрЛП(Формула);
	ПервыйЗнак = Лев(Формула, 1);
	Если ПервыйЗнак = "=" Тогда
		Формула = Сред(Формула, 2);		
	КонецЕсли;
	
	РезультатРасчета = Вычислить(Формула);
	
	ТипРезультата = лимсИзмерения.ТипДанныхПоТипуПоказателяКонтроля(ДанныеПоказателя.ТипПоказателя);
	Если ТипРезультата.СодержитТип(Тип("Строка")) Тогда
		РезультатРасчета = Строка(РезультатРасчета);
	ИначеЕсли ТипРезультата.СодержитТип(Тип("Булево")) Тогда
		РезультатРасчета = Булево(РезультатРасчета);
	ИначеЕсли ТипРезультата.СодержитТип(Тип("Число")) Тогда
		РезультатРасчета = Число(РезультатРасчета);
		Знак = ?(ДанныеПоказателя.ЧислоНеотрицательное = Истина, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой);
		ВозможныйТип = Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(ДанныеПоказателя.ДлинаЧисла,
		ДанныеПоказателя.ТочностьЧисла, 
		Знак));
		РезультатРасчета = ВозможныйТип.ПривестиЗначение(РезультатРасчета);
	КонецЕсли;
	
	Возврат РезультатРасчета;
	
КонецФункции 


&НаСервереБезКонтекста
Процедура ПодставитьЗначенияВФормулу(Формула, ИдентификаторДляФормул, Значение)
	
	ПодстрокаЗамены = Значение;
	Если ТипЗнч(ПодстрокаЗамены) = Тип("Число") Тогда
		ПодстрокаЗамены = Формат(ПодстрокаЗамены, "ЧРД=.; ЧН=0; ЧГ=0");
	ИначеЕсли ТипЗнч(ПодстрокаЗамены) = Тип("Булево") Тогда
		ПодстрокаЗамены = Формат(ПодстрокаЗамены, "БЛ=Ложь; БИ=Истина");
	Иначе
		ПодстрокаЗамены = СтрШаблон("""%1""", ПодстрокаЗамены);
	КонецЕсли;
	
	Формула = СтрЗаменить(Формула, СтрШаблон("[%1]", ИдентификаторДляФормул), ПодстрокаЗамены);
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьЗначенияСтрокиФакта(СтрокаФакта)
	
	СтрокаФакта.ЗначениеФакт = Неопределено;
	СтрокаФакта.ЗначениеФактМин = Неопределено;
	СтрокаФакта.ЗначениеФактМакс = Неопределено;
	СтрокаФакта.СоответствуетНормативу = Ложь;
	СтрокаФакта.ФактическаяДатаПолученияРезультата = Дата(1, 1, 1);	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Организация = Справочники.Организации.НайтиПоНаименованию("«АГРАНА Фрут Московский регион» ООО");
	ЭтотОбъект.Объект.Организация =Организация;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНорматив(ЗначениеПоиска, ТЧФакта, ТЧНормы)
	
	Если Не ЗначениеЗаполнено(ЗначениеПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьФактСогласноНорме(ЗначениеПоиска, ТЧФакта, ТЧНормы);                                        
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактСогласноНорме(Показатель, ТЧФакта, ТЧНормы)
	
	ДатаПолученияРезультата = ТекущаяДатаСеанса();
	
	СтруктураПоиска = Новый Структура("Показатель", Показатель); 
	МассивСтрок = ТЧФакта.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока Из МассивСтрок Цикл							
		МассивСтрокНормы = ТЧНормы.НайтиСтроки(СтруктураПоиска);  
		Если МассивСтрокНормы.Количество() Тогда
			СтрокаНормы = МассивСтрокНормы[0];
		Иначе
			Продолжить;
		КонецЕсли;
		
		ДанныеРасчетаСоотв = Новый Структура;
		ДанныеРасчетаСоотв.Вставить("Методика", СтрокаНормы.Методика);
		ДанныеРасчетаСоотв.Вставить("Показатель", СтрокаНормы.Показатель);
		ДанныеРасчетаСоотв.Вставить("ЗначениеНорма", СтрокаНормы.ЗначениеНорма);
		ДанныеРасчетаСоотв.Вставить("ЗначениеМин", СтрокаНормы.ЗначениеМин);
		ДанныеРасчетаСоотв.Вставить("ЗначениеМакс", СтрокаНормы.ЗначениеМакс);
		ДанныеРасчетаСоотв.Вставить("ЗначениеПогрешность", СтрокаНормы.ЗначениеПогрешность);
		ДанныеРасчетаСоотв.Вставить("ОтключитьКонтрольНорматива", СтрокаНормы.ОтключитьКонтрольНорматива);
		
		ДанныеРасчетаСоотв.Вставить("ЗначениеФакт", НайденнаяСтрока.ЗначениеФакт);
		ДанныеРасчетаСоотв.Вставить("ЗначениеФактМин", НайденнаяСтрока.ЗначениеФактМин);
		ДанныеРасчетаСоотв.Вставить("ЗначениеФактМакс", НайденнаяСтрока.ЗначениеФактМакс);
		НайденнаяСтрока.СоответствуетНормативу = ДеревоНормативовСоответствуетРасчет(ДанныеРасчетаСоотв);  
		
		
		
		//Если НЕ ЗначениеЗаполнено(СтрокаНормы.ЗначениеМин) И НЕ ЗначениеЗаполнено(СтрокаНормы.ЗначениеМакс) Тогда    
		//	НайденнаяСтрока.ЗначениеФакт = СтрокаНормы.ЗначениеНорма;
		//Иначе 
		//	НайденнаяСтрока.ЗначениеФакт = (СтрокаНормы.ЗначениеМин + СтрокаНормы.ЗначениеМакс) / 2; 
		//КонецЕсли;
		//НайденнаяСтрока.СоответствуетНормативу = Истина; 
		//НайденнаяСтрока.ФактическаяДатаПолученияРезультата = ДатаПолученияРезультата;
		////ИнформацияРезультат = ИнформацияРезультат + Символы.ПС + Показатель + " - данные сохранены успешно"
	КонецЦикла;  
	
	
КонецПроцедуры 

&НаСервере
Функция ДеревоНормативовСоответствуетРасчет(ДанныеРасчетаСоотв)
	
	Возврат лимсКонтрольКачества.РассчитатьСоответствуетНормативуНаСервере(ДанныеРасчетаСоотв, Объект);
	
КонецФункции







